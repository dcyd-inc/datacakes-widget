(()=>{const n=document.createElement("template");n.innerHTML='\n  <style>\n      :host {\n        font-size: 13px;\n        font-family: arial;\n      }\n      article {\n          display: flex;\n          align-items: center;\n      }\n      label {\n        color: white;\n        font-size: 14px;\n        font-weight: bold;\n        font-family: verdana;\n        cursor: pointer;\n        background-color: rgb(30,121,141);\n        border: 1px solid rgb(118, 118, 118);\n        padding: 9px 22px;\n        border-radius: 5px;\n      }\n      #loader {\n        display: none;\n        margin: auto;\n      }\n  </style>\n  <article>\n    <label part="upload-button" for="fileUpload">Learn</label>\n    <section hidden>\n      <span></span>\n      <svg\n        id="loader"\n        xmlns="http://www.w3.org/2000/svg"\n        xmlns:xlink="http://www.w3.org/1999/xlink"\n        width="150px"\n        height="150px"\n        viewBox="0 0 100 100"\n        preserveAspectRatio="xMidYMid"\n      >\n        <g transform="translate(20 50)">\n          <circle cx="0" cy="0" r="6" fill="#e15b64">\n            <animateTransform\n              attributeName="transform"\n              type="scale"\n              begin="-0.375s"\n              calcMode="spline"\n              keySplines="0.3 0 0.7 1;0.3 0 0.7 1"\n              values="0;1;0"\n              keyTimes="0;0.5;1"\n              dur="1s"\n              repeatCount="indefinite"\n            ></animateTransform>\n          </circle>\n        </g>\n        <g transform="translate(40 50)">\n          <circle cx="0" cy="0" r="6" fill="#f8b26a">\n            <animateTransform\n              attributeName="transform"\n              type="scale"\n              begin="-0.25s"\n              calcMode="spline"\n              keySplines="0.3 0 0.7 1;0.3 0 0.7 1"\n              values="0;1;0"\n              keyTimes="0;0.5;1"\n              dur="1s"\n              repeatCount="indefinite"\n            ></animateTransform>\n          </circle>\n        </g>\n        <g transform="translate(60 50)">\n          <circle cx="0" cy="0" r="6" fill="#abbd81">\n            <animateTransform\n              attributeName="transform"\n              type="scale"\n              begin="-0.125s"\n              calcMode="spline"\n              keySplines="0.3 0 0.7 1;0.3 0 0.7 1"\n              values="0;1;0"\n              keyTimes="0;0.5;1"\n              dur="1s"\n              repeatCount="indefinite"\n            ></animateTransform>\n          </circle>\n        </g>\n        <g transform="translate(80 50)">\n          <circle cx="0" cy="0" r="6" fill="#81a3bd">\n            <animateTransform\n              attributeName="transform"\n              type="scale"\n              begin="0s"\n              calcMode="spline"\n              keySplines="0.3 0 0.7 1;0.3 0 0.7 1"\n              values="0;1;0"\n              keyTimes="0;0.5;1"\n              dur="1s"\n              repeatCount="indefinite"\n            ></animateTransform>\n          </circle>\n        </g>\n      </svg>\n    </section>\n  </article>\n  <input hidden id="fileUpload" type="file" />\n';class e extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(n.content.cloneNode(!0))}connectedCallback(){this.select("input").onchange=n=>this.handleChange(n)}async handleChange(n){const e=n.target.files[0];this.select("section").style.display="block",this.select("span").innerText=e.name,this.select("#loader").style.display="inline";const t=await async function(n){var e=new FormData;e.append("file",n);return(await fetch("https://bots.datacakes.ai/create-docs-bot",{method:"POST",body:e})).json()}(e);this.select("#loader").style.display="none",this.select("input").value="",this.dispatch("change",t)}dispatch(n,e){this.dispatchEvent(new CustomEvent(n,{detail:e}))}get select(){return this.shadowRoot.querySelector.bind(this.shadowRoot)}}window.customElements.define("datacake-uploader",e)})();